services:
  # Add MinIO service
  minio:
    image: minio/minio:latest
    container_name: automation-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
      - MINIO_DEFAULT_BUCKETS=automation-files
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - automation-network

  app:
    container_name: auto-flow-app-1
    build:
      context: .
      dockerfile: Dockerfile.unified
    ports:
      - "8000:8000"  # Backend API
      - "5901:5901"  # VNC protocol
      - "7900:7900"  # noVNC Web UI
    env_file:
      - ./backend/.env
    environment:
      - VNC_PUBLIC_HOST=${VNC_PUBLIC_HOST:-localhost}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET_NAME=automation-files
      - MINIO_PUBLIC_ENDPOINT=${MINIO_PUBLIC_ENDPOINT:-localhost:9000}
      - STORAGE_BACKEND=minio  # Can be 'local' or 'minio'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - screenshots:/app/screenshots
      - uploads:/app/uploads
    shm_size: '2gb'
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 5901 && nc -z localhost 8000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - automation-network

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - TZ=America/New_York
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      app:
        condition: service_healthy
    command: npm run dev
    networks:
      - automation-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=automation
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - TZ=America/New_York
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d automation"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - automation-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - automation-network

networks:
  automation-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  screenshots:
  uploads:
  minio_data:  # New volume for MinIO
